.decl add0(x:number, y : number, z : number)
.decl delta_add0(x:number, y : number, z : number)
.decl delta_add(x:number, y : number, z : number)
.decl add1(x : number, y : number, z : number)
.decl delta_add1(x:number, y : number, z : number)
.decl maxid0(x : number)
.decl id0(x : number)
.decl root(x : number, y : number)

.input add0
.input delta_add0

// calculate fresh id offset
id0(x) :- add0(x,_,_).
id0(y) :- add0(_,y,_).
id0(z) :- add0(_,_,z).

root(x,x) :- id0(x).

maxid0(x) :- x = 1 + max t : id0(t).

// generate new ids needed for certain rules

// expanded from add(y,z,autoinc() + mid) :- add0(_x,y,xy), add0(xy,z,_xyz), 0 = count : add0(y,z,_yz), maxid0(mid).
delta_add(y,z,autoinc() + mid) :- delta_add0(_x,y,xy), add0(xy,z,_xyz), 0 = count : add0(y,z,_yz), maxid0(mid).
delta_add(y,z,autoinc() + mid) :- add0(_x,y,xy), delta_add0(xy,z,_xyz), 0 = count : add0(y,z,_yz), maxid0(mid).

// expanded from add(x,y,autoinc() + mid) :- add0(x,yz,_xyz), add0(y,_z,yz), 0 = count : add0(x,y,_xy), maxid0(mid).
delta_add(x,y,autoinc() + mid) :- delta_add0(x,yz,_xyz), add0(y,_z,yz), 0 = count : add0(x,y,_xy), maxid0(mid).
delta_add(x,y,autoinc() + mid) :- add0(x,yz,_xyz), delta_add0(y,_z,yz), 0 = count : add0(x,y,_xy), maxid0(mid).

delta_add(x,y,z) :- delta_add0(x,y,z).

// Ematch for rewrites
delta_add(y,x,xy) :- delta_add0(x,y,xy), !add0(y,x,xy).

//add(x,yz,xyz) :- add0(x,y,xy), add0(xy,z,xyz), add0(y,z,yz).
delta_add(x,yz,xyz) :- delta_add0(x,y,xy), add0(xy,z,xyz), add0(y,z,yz), !add0(x,yz,xyz).
delta_add(x,yz,xyz) :- add0(x,y,xy), delta_add0(xy,z,xyz), add0(y,z,yz), !add0(x,yz,xyz).
delta_add(x,yz,xyz) :- add0(x,y,xy), add0(xy,z,xyz), delta_add0(y,z,yz), !add0(x,yz,xyz).


//add(xy,z,xyz) :- add0(x,yz,xyz), add0(y,z,yz), add0(x,y,xy).
delta_add(xy,z,xyz) :- delta_add0(x,yz,xyz), add0(y,z,yz), add0(x,y,xy), !add0(xy,z,xyz).
delta_add(xy,z,xyz) :- add0(x,yz,xyz), delta_add0(y,z,yz), add0(x,y,xy), !add0(xy,z,xyz).
delta_add(xy,z,xyz) :- add0(x,yz,xyz), add0(y,z,yz), delta_add0(x,y,xy), !add0(xy,z,xyz).



delta_add(x1,y1,z1) :- delta_add(x,y,z), root(x,x1), root(y,y1), root(z,z1).
// delta_add(x1,y1,z1) :- add(x,y,z), root(x,x1), root(y,y1), root(z,z1), !add0(x,y,z).
root(z,z1) :- delta_add(x,y,z), add0(x,y,z1), z1 < z.
root(z,z1) :- add0(x,y,z), delta_add(x,y,z1), z1 < z.

// Here we do need the double delta because delta_add has not ben folded into add0.
root(z,z1) :- delta_add(x,y,z), delta_add(x,y,z1), z1 < z.

// canonical element is minimum number in equiv class
root(x, y) <= root(x, y1) :- y1 <= y.

//add1 is projection of only roots. allow through if not in union find at all also
add1(x,y,z) :- add0(x,y,z), ((root(x,x) ; !root(x,_)), (root(y,y); !root(y,_)), (root(z,z) ; !root(z,_))).
add1(x,y,z) :- delta_add(x,y,z), ((root(x,x) ; !root(x,_)), (root(y,y); !root(y,_)), (root(z,z) ; !root(z,_))).

delta_add1(x,y,z) :- add1(x,y,z), !add0(x,y,z), ((root(x,x) ; !root(x,_)), (root(y,y); !root(y,_)), (root(z,z) ; !root(z,_))).

.output delta_add1(filename="delta_add0.facts")
.output add1(filename="add0.facts")

.printsize add1
.printsize delta_add1

/*
as it stands delta_add is pretty much always a fraction of add itself.
This could be an artifact of this particular problem.
Exponential growth == delta is approximately as big as current
xdot = x


*/
